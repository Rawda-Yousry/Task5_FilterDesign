# import numpy as np
# from scipy import signal
# import matplotlib.pyplot as plt


# zero = [[1.0, 0.0], [-1.0,0.0]]
# pole =[]
# # pole = [[0.0,0.90],[0.9,0.0]]

# def parseToComplex(pairs):
#     complexNumbers = [0]*len(pairs)
#     print(complexNumbers)
#     for i in range(len(pairs)):
#         x = round(pairs[i][0], 2)
#         y = round(pairs[i][1], 2)
#         complexNumbers[i] = x+ y*1j
#         print(complexNumbers[i])
#     return complexNumbers

# zeroes = parseToComplex(zero)
# poles = parseToComplex(pole)

# x = 0j
# print(x)

# # w, h = signal.freqz_zpk(zeroes, poles, k=1)
# # w = np.round(w, 2)
# # angles = np.unwrap(np.angle(h))
# # angles2 = np.zeros(512)
# # h = 20 * np.log10(np.abs(h))


# w, h = signal.freqz_zpk(zeroes, poles, k=1, fs =2* np.pi)
# magnitude = 20 * np.log10(np.abs(h))
# angles = np.unwrap(np.angle(h))

# fig = plt.figure()
# ax = fig.add_subplot(1, 1, 1)
# # ax.plot(w, magnitude)
# ax.plot(w, angles)
# # ax.plot(h)
# # ax.set_title('Chebyshev Type II bandpass frequency response')
# # ax.set_xlabel('Frequency [Hz]')
# # ax.set_ylabel('Amplitude [dB]')
# # ax.axis((10, 1000, -100, 10))
# ax.grid(which='both', axis='both')
# plt.show()


import numpy as np
import matplotlib.pyplot as plt

def all_pass_filter(a, phase_response):
    b = 1-a
    num = [b, 0]
    den = [1, -a]
    filtered_phase = np.convolve(num, phase_response) / np.convolve(den, [1]*len(phase_response))
    return filtered_phase

a = float(input("Enter the value of a: "))
phase_response = [-0.7803220648641498, -0.7771914588372646, -0.7740604609539504, -0.7709290663285845, -0.7677972699988315, -0.7646650669240984, -0.7615324519839518, -0.7583994199764978, -0.7552659656167214, -0.7521320835347861, -0.7489977682742917, -0.7458630142904885, -0.7427278159484489, -0.7395921675211921, -0.7364560631877625, -0.7333194970312609, -0.7301824630368244, -0.727044955089558, -0.7239069669724101, -0.7207684923639979, -0.717629524836374, -0.7144900578527374, -0.7113500847650855, -0.7082095988118039, -0.7050685931151948, -0.7019270606789405, -0.6987849943855006, -0.6956423869934392, -0.6924992311346837, -0.6893555193117085, -0.6862112438946446, -0.6830663971183116, -0.6799209710791693, -0.676774957732187, -0.6736283488876278, -0.6704811362077447, -0.6673333112033861, -0.6641848652305079, -0.6610357894865887, -0.6578860750069455, -0.6547357126609463, -0.6515846931481154, -0.6484330069941312, -0.6452806445467072, -0.6421275959713582, -0.638973851247044, -0.6358194001616887, -0.632664232307569, -0.6295083370765703, -0.6263517036553023, -0.6231943210200743, -0.6200361779317187, -0.6168772629302635, -0.6137175643294464, -0.6105570702110629, -0.6073957684191462, -0.6042336465539709, -0.6010706919658729, -0.5979068917488836, -0.5947422327341653, -0.591576701483247, -0.5884102842810494, -0.5852429671286913, -0.5820747357360733, -0.578905575514225, -0.5757354715674122, -0.5725644086849914, -0.5693923713330047, -0.5662193436455032, -0.5630453094155912, -0.5598702520861776, -0.5566941547404258, -0.55351700009189, -0.5503387704743239, -0.5471594478311526, -0.5439790137045912, -0.5407974492243979, -0.5376147350962469, -0.5344308515897073, -0.5312457785258082, -0.5280594952641798, -0.5248719806897467, -0.5216832131989598, -0.518493170685547, -0.5153018305257613, -0.512109169563107, -0.5089151640925228, -0.5057197898439973, -0.502523021965595, -0.49932483500586566, -0.4961252028956138, -0.4929240989289976, -0.48972149574393026, -0.4865173653017546, -0.4833116788661558, -0.48010440698128243, -0.4768955194490382, -0.47368498530550956, -0.4704727727964893, -0.4672588493520549] # your phase response
filtered_phase = all_pass_filter(a, phase_response)

plt.plot(phase_response)
plt.plot(filtered_phase)
plt.show()
